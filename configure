#!/bin/sh
usage() {
  cat <<EOF
usage: configure [ <option> ... ]

where '<option>' is one of the following:

-h | --help       print this command line option summary
-g | --debugging  debugging build
-q | --quiet      disable all messages
-p | --pedantic   pedantic compilation for C11

-f...             passed to compiler, e.g., '-fsanitize=address,undefined'
EOF
  exit 1
}

debug=no
quiet=no
pedantic=no
options=""

die() {
  echo "configure: error: $*" 1>&2
  exit 1
}
checkdir() {
  [ -d "$1" ] || die "could not find '$1'"
}

checkfile() {
  [ -f "$1" ] || die "could not find '$1'"
}

while [ $# -gt 0 ]; do
  case "$1" in
    -h | --help)
      usage
      exit 0
      ;;
    -g | --debugging) debug=yes ;;
    -q | --quiet) quiet=yes ;;
    -p | --pedantic) pedantic=yes ;;
    -f*) options="$options $1" ;;
    CXX=*)
      CXX="$(expr \"$1\" : 'CXX=\(.*\)')"
      ;;

    CXXFLAGS=*)
      CXXFLAGS="$(expr "$1" : 'CXXFLAGS=\(.*\)')"
      ;;
    *) die "invalid option '$1' (try '-h')" ;;
  esac
  shift
done

[ x"$CXX" = x ] && CXX=g++
CXXFLAGS="$CXXFLAGS -Wall -Wextra -std=c++2a"

[ $debug = no ] && CXXFLAGS="$CXXFLAGS -O3"
[ $debug = yes ] && CXXFLAGS="$CXXFLAGS -ggdb3 -rdynamic"
[ $quiet = yes ] && CXXFLAGS="$CXXFLAGS -DQUIET"
[ $pedantic = yes ] && CXXFLAGS="$CXXFLAGS -Werror --pedantic"

CXXFLAGS="$CXXFLAGS$options"

#--------------------------------------------------------------------------#
[ x"$AIGER" = x ] && AIGER="../aiger"
checkdir "$AIGER"
checkfile "$AIGER/aiger.h"

INC="-I\${AIGER}"
LIBS=""
[ $debug = yes ] && LIBS="$LIBS"
#--------------------------------------------------------------------------#
# Check that compilation flags work.
feature=./configure-hello-world
cat <<EOF >$feature.cpp
#include <iostream>
int main () { std::cout << "hello world" << std::endl; }
EOF
if $CXX $CXXFLAGS -Werror -pedantic -o $feature.exe $feature.cpp 2>>configure.log; then
  if [ ! "$($feature.exe 2>>configure.log | tr -d '\r')" = "hello world" ]; then
    die "execution of '$feature.exe' failed"
  fi
else
  die "test compilation '$feature.cpp'"
fi
rm configure-hello-world.* configure.log

#--------------------------------------------------------------------------#
echo "configure: $CXX $CXXFLAGS"

rm -f makefile
cat <<EOF >makefile
CXX=$CXX
CXXFLAGS=$CXXFLAGS
AIGER=$AIGER

DEP=\$(filter-out build.hpp,\$(wildcard *.hpp))
SRC=\$(sort \$(wildcard *.cpp))
OBJ=\$(SRC:.cpp=.o) \${AIGER}/aiger.o
INC=$INC
LIBS=$LIBS
COMPILE=\$(CXX) \$(CXXFLAGS)

%.o: %.cpp \$(DEP) makefile
	\$(COMPILE) -c \$< \$(INC)

all: certifaiger
certifaiger: \$(OBJ) makefile build.hpp
	\$(COMPILE) -o \$@ \$(OBJ) \$(LIBS)

build.hpp: VERSION makefile
	./info.sh > \$@
format:
	clang-format -i *.[ch]pp
clean:
	rm -f *.o gmon.out makefile certifaiger build.hpp
.PHONY: all clean
EOF
echo "configure: generated makefile"
echo "configure: compile with: make"
