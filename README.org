* Certifaiger
[[https://github.com/Froleyks/certifaiger][Certifaiger]] checks the correctness of witnesses circuits in the [[https://github.com/arminbiere/aiger][AIGER]] format.

** Quickstart

#+begin_src bash
cd certifaiger
./build_dependencies.sh
# If resets are not stratified
# ./build_dependencies.sh qbf

# Generates the checks, translates them to CNF, and runs kissat
./check_certificate.sh <model.aig> <witness.aig>
#+end_src
** Motivation
Model checking is an essential technique for hardware design.
For unsafe circuits, those that violate the property being checked, it is usually easy to produce a trace to demonstrate the flaw.
In cases where the model checking succeeds, a certificate should be produced that proves the property indeed holds for all possible traces.
We propose /witness circuits/ as a format for these certificates.
A witness circuit generalizes the concept of an inductive invariant.

Instead of searching for an inductive invariant in the model itself, we find a different circuit -- the witness -- that simulates part of the model and has an inductive invariant.
** Witness circuits
To check if a witness circuit is valid for a given model, Certifaiger performs five checks.
For an AIGER circuit $C$ we use
$R(L), F(L, \hat{L}), P(I, L)$
to refer to the symbolic formulas encoding that:
- The latches in $L$ are in their reset.
- The latches in $\hat{L}$ are equal to the /next/ of the matching latch in $L$.
- The property holds on the inputs and latches in $I \cup L$, i.e. the /bad/ or /output/ is not set.

These formulas can be encoded as combinatorial AIGER circuits by replacing latches with inputs, resulting in a DAG with a single output and leaves ending in inputs or constants.

Note that we use a (slightly) modified version of the AIGER 1.9 format.
Our witness circuits may require the use of /reset functions/,
that is, latches may be reset to other latches or gates,
instead of just constants (or stay uninitialized).

For a model $C$ and witness circuit $C'$,
let $R, F, P, I, L$ and their primed version be the formulas from above and the set of all inputs and latches in the respective circuit,
$M$ is the intersection of latches and inputs between the two.
The five checks are:
| Reset      | $R(M) \Rightarrow R'(M)$                               |
| Transition | $F(M,\hat{M}) \Rightarrow F'(M,\hat{M})$               |
| Property   | $P'(I',L') \Rightarrow P(I,L)$                         |
| Base       | $R'(L') \Rightarrow P'(I',L')$                         |
| Step       | $(P'(L') \wedge F'(L', \hat{L'})) \Rightarrow P'(\hat{L'})$ |

The validity of these formulas is checked by encoding their negation into combinatorial circuits, translated to CNF using [[https://github.com/arminbiere/aiger][aigtocnf]], and checking unsatisfiability with [[https://github.com/arminbiere/kissat][Kissat]] or any other SAT solver.
The produced certificates of unsatisfiability may additionally be checked by a [[https://satcompetition.github.io/2023/downloads/proposals/drat_dpr.pdf][verified proof checker]].
The entire certificate check is coNP in the size of the circuits.
** Stratification
A circuit is said to be stratified if the syntactic dependency graph induced by its reset function is acyclic.
This is usually not a big restriction and fairly common in practice.
The /semantic dependency graph/ is the subset of the syntactic dependency graph,
where an edge $(a, b)$ indicates that
an assignment exists where a change in $b$ would imply a change in $a$.

In case both circuits are stratified,
the Reset check above ensures that the set $M$ is at the bottom of the semantic dependency graph of either circuit,
i.e., the reset of the latches in $M$ depends only on $M$.
It follows that any reset of $M$ can be extended to a reset of $L$ and $L'$.

If either circuit is not stratified, it is not guaranteed that a partial reset can be extended.
Therefore, Certifaiger implements the stronger check Reset^{\exists} if the polynomial stratification test fails.
| Reset^{\exists} | $R(L) \Rightarrow \exist(L' \setminus L): R'(L')$ |
The explicit quantifier is necessary as otherwise every extension to $L'$ of a reset in $C$ (reduced to $M$) would need to be a valid reset in $C'$.
This very strong condition would be unlikely to hold if $C'$ introduces any additional latches.
Since the formula is checked for validity, we have the quantifier alternation \exists\forall when encoding Reset^{\exists} and are no longer in coNP.
In practice, Certifaiger encodes Reset^{\exists} as a [[https://github.com/ltentrup/quabs][QAIGER]] circuit which is then translated to QCIR and checked with [[https://github.com/ltentrup/quabs][QuAbS]].
Certifaiger will pick the appropriate Reset check without further interaction; however, note that the tool will return exit code 15 if a QAIGER formula was produced.
See [[https://github.com/Froleyks/certifaiger/blob/main/check_certificate.sh][check_certificate.sh]] for more details.
** Witness Format
Witness circuits are normal AIGER circuits.
They can include a section in the comments to express the mapping of shared inputs and latches:
#+begin_example
c
WITNESS_CIRCUIT 2 b2sum 9c7b52...  model.aag
2 2
4 4
#+end_example
The section starts with ~WITNESS_CIRCUIT~ followed by the number of shared inputs and latches $n$.
The next $n$ lines express which input/latch in the model map to which input/latch in the witness.
While not necessary, it is recommended to include some identifying information about the corresponding model after the number of shared variables.

If no such section is found, Certifaiger assumes that all inputs and latches of the model are mapped to the same indices in the witness.
Checkout the [[https://github.com/Froleyks/certifaiger/blob/main/examples][examples]] directory.
** References
The theory this tool is based on is detailed in our papers.
Beyond that, we demonstrate how to certify the combination of different preprocessing techniques and model checking algorithms with witness circuits.
| Progress in Certifying Hardware Model Checking Results      | Yu, Biere & Heljanko        | CAV21   |
| Stratified Certification for K-Induction                    | Yu, Froleyks & Biere et al. | FMCAD22 |
| Towards Compositional Hardware Model Checking Certification | Yu, Froleyks & Biere et al. | FMCAD23 |
| Certifying Phase Abstraction                                | Froleyks, Yu & Biere et al. | IJCAR24 |
